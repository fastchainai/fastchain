"""API routes for Intent Agent v1."""
from fastapi import APIRouter, HTTPException, Request, Header
from typing import Dict, Optional
from . import models
from src.agents.intent_agent import IntentAgent
import logging

logger = logging.getLogger(__name__)
router = APIRouter()

@router.get("/health")
async def health_check() -> Dict[str, str]:
    """Health check endpoint."""
    return {"status": "ok", "version": "1.0.0"}

@router.post("/intent/process", response_model=models.IntentResponse)
async def process_intent(
    request: Request,
    payload: models.IntentRequest,
    session_id: Optional[str] = Header(None)
) -> Dict:
    """
    Process a query to determine intent and extract entities.

    Args:
        request: FastAPI request object
        payload: Intent request payload
        session_id: Optional session ID for context continuity
    """
    try:
        # Get tool registry from app state
        tool_registry = request.app.state.tool_registry
        logger.debug(f"Available tools: {[t.name for t in tool_registry.get_all_tools()]}")

        # Initialize IntentAgent with the shared tool registry
        intent_agent = IntentAgent(tool_registry=tool_registry)

        # Process the query with session context
        result = await intent_agent.process_query(payload.query, session_id=session_id)
        logger.debug(f"Intent processing result: {result}")
        return result
    except Exception as e:
        logger.error(f"Error processing intent: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/intent/context/{session_id}")
async def get_context_status(request: Request, session_id: str) -> Dict:
    """
    Get the current context status for a session.

    Args:
        request: FastAPI request object
        session_id: The session ID to retrieve context for
    """
    try:
        intent_agent = IntentAgent(tool_registry=request.app.state.tool_registry)
        return intent_agent.get_context_status(session_id)
    except Exception as e:
        logger.error(f"Error getting context status: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))

@router.delete("/intent/context/{session_id}")
async def clear_context(request: Request, session_id: str) -> Dict[str, str]:
    """
    Clear the context for a specific session.

    Args:
        request: FastAPI request object
        session_id: The session ID to clear context for
    """
    try:
        intent_agent = IntentAgent(tool_registry=request.app.state.tool_registry)
        intent_agent.clear_session_context(session_id)
        return {"status": "success", "message": f"Context cleared for session {session_id}"}
    except Exception as e:
        logger.error(f"Error clearing context: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/learning/analytics")
async def get_learning_analytics(request: Request) -> Dict:
    """Get analytics about the learning process and adaptations."""
    try:
        intent_agent = IntentAgent(tool_registry=request.app.state.tool_registry)
        analytics = intent_agent.get_learning_status()

        # Include adaptation suggestions if available
        if hasattr(intent_agent, 'feedback_loop'):
            analytics['adaptations'] = intent_agent.feedback_loop.get_adaptation_suggestions()

        return analytics
    except Exception as e:
        logger.error(f"Error getting learning analytics: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))